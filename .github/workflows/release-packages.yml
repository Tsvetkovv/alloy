name: Draft New Release with Distributables

on:
  release:
    types: [created]

jobs:
  windows:
    needs: create_release
    runs-on: windows-latest
    env:
      EMULSION_VERSION: ${{ needs.create_release.outputs.version }}
      INSTALLER_NAME: ${{ format('Emulsion-Windows-{0}.exe', needs.create_release.outputs.version) }}
    steps:
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Print installer name
      run: |
        Write-Host $Env:INSTALLER_NAME
    - name: Install NSIS
      run: |
        iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
        scoop bucket add extras
        scoop install nsis
    - name: Print NSIS version
      run: makensis -VERSION
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Fetch Prerequisites
      working-directory: ./distribution/windows/prerequisites
      run: (New-Object System.Net.WebClient).DownloadFile('https://aka.ms/vs/16/release/vc_redist.x64.exe', 'vc_redist.x64.exe')
    - name: Install avif build dependencies (Windows)
      run: |
        choco install -y ninja
        pip install meson
        $NASM_VERSION="2.15.02"
        $LINK="https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/win64"
        curl -LO "$LINK/nasm-$NASM_VERSION-win64.zip"
        7z e -y "nasm-$NASM_VERSION-win64.zip" -o"C:\nasm"
        echo "C:\nasm" >> $env:GITHUB_PATH
    - name: Build executable
      shell: cmd
      run: |
        call "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        cargo build --release --features=networking,avif
    - name: Copy executable to distributable folder
      working-directory: ./distribution/windows/
      shell: cmd
      run: |
        mkdir program
        copy /y ..\..\target\release\emulsion.exe program\emulsion.exe
    - name: Create installer
      working-directory: ./distribution/windows/
      run: |
        makensis /DVERSION=$Env:EMULSION_VERSION emulsion.nsi
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} 
        asset_path: ./distribution/windows/Emulsion-Installer.exe
        asset_name: ${{ env.INSTALLER_NAME }}
        asset_content_type: application/octet-stream

